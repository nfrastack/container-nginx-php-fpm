#!/command/with-contenv bash
# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

php_version=$(php -v 2>/dev/null | grep "^PHP " | head -n 1 | awk '{print $2}')
php_base=${php_version:0:3}

case "$(container_info distro)" in
    "alpine" )
        case "${php_version:0:3}" in
            8*)
                php_prefix="/etc/php${php_base/./}/"
            ;;
            * )
                php_prefix="/etc/php${php_version:0:1}/"
            ;;
        esac
        modules_available="${php_prefix}/conf.available/"
    ;;
    "debian" )
        php_prefix="/etc/php/${php_base}/"
        modules_available="${php_prefix}/mods-available/"
    ;;
esac

disable_module() {
    if [ -n "$1" ]; then
        case "$1" in
            "all" )
                echo "**Disabling All Modules"
                for module in "${modules_available}"/*.ini ; do
                    case "$(container_info distro)" in
                        "alpine" )
                            rm -f "${php_prefix}"/conf.d/$(cat ${module} | grep ";priority" | cut -d = -f 2)-$(basename ${module})
                        ;;
                        "debian" )
                            silent phpdismod $(basename $module .ini)
                        ;;
                    esac
                done
            ;;
            "core" )
                php_env_modules_enabled=$(get_php_env_modules_enabled)
                for module in $php_env_modules_enabled ; do
                    if [ -f "${modules_available}/${module}.ini" ]; then
                        echo "Disabling ${module}"
                        case "$(container_info distro)" in
                            "alpine" )
                                rm -f ${php_prefix}/conf.d/$(cat ${modules_available}/${module}.ini | grep ";priority" | cut -d = -f 2)-${module}.ini
                            ;;
                            "debian" )
                                silent phpdismod $(basename ${module} .ini)
                                if [ "${php_major_version}" != "8" ] ; then phpdismod json ; fi
                                if [[ "$( ls -l ${php_prefix}/fpm/conf.d/*-opcache.ini |  wc -l )" -ge 1 ]] ; then
                                    rm -f "$(ls ${php_prefix}/fpm/conf.d/*-opcache.ini | tail -1 )"
                                fi
                                if [[ "$( ls -l ${php_prefix}/cli/conf.d/*-opcache.ini |  wc -l )" -ge 1 ]] ; then
                                    rm -f "$(ls ${php_prefix}/cli/conf.d/*-opcache.ini | tail -1 )"
                                fi
                            ;;
                        esac
                        php_script_modules_disabled="${php_actual_modules_disabled} $(basename ${module} .ini)"
                    else
                        echo "** Requested disabling ${module} however it doesn't exist!"
                    fi
                done
            ;;
            "optional" )
                php_env_modules_enabled=$(get_php_env_modules_enabled)
                echo "** Disabling Optional Modules"
                for module in ${modules_available}/*.ini; do
                    MATCH=0
                    for plugin in $php_env_modules_enabled ; do
                        if [ "$(basename ${module} .ini)" = "${plugin}" ] ; then
                            (( MATCH+=1 ))
                        fi
                    done

                    if [[ "$MATCH" -lt 1 ]] ; then
                        echo "Disabling $(basename $module .ini)"
                        case "$(container_info distro)" in
                            "alpine" )
                                rm -f "${php_prefix}"conf.d/$(cat ${module} | grep ";priority" | cut -d = -f 2)-$(basename ${module})
                            ;;
                            "debian" )
                                silent phpdismod $(basename ${module} .ini)
                            ;;
                        esac
                    fi
                done
            ;;
            reset )
                case "$(container_info distro)" in
                    "alpine" )
                        rm -rf ${php_prefix}conf.d/*
                    ;;
                    "debian" )
                        rm -rf ${php_prefix}/*/conf.d/*
                    ;;
                esac
            ;;
            * )
                if [ -f "${modules_available}/${1}.ini" ]; then
                    echo "Disabling ${1}"
                        case "$(container_info distro)" in
                            "alpine" )
                                rm -f ${php_prefix}conf.d/$(cat ${modules_available}/${1}.ini | grep ";priority" | cut -d = -f 2)-$1.ini
                            ;;
                            "debian" )
                                silent phpdismod ${1}
                            ;;
                        esac
                else
                    echo "** Requested disabling '$1' module however it doesn't exist!"
                fi
            ;;
        esac
    else
       echo "** Disable Module"
       echo "Commands: all | core | optional | (modulename)"
    fi
}

enable_module () {
    if [ -n "${1}" ]; then
        case "${1}" in
                "all" )
                    echo "** Enabling All Modules"
                    for module in "${modules_available}"/*.ini; do
                        echo "Enabling ${module}"
                        case "$(container_info distro)" in
                            "alpine" )
                                ln -sf "${module}" "${php_prefix}"/conf.d/$(cat "${module}" | grep ";priority" | cut -d = -f 2)-$(basename "${module}")
                            ;;
                            "debian" )
                                silent phpenmod $(basename "${module}" .ini)
                            ;;
                        esac
                    done
                ;;
                "core" )
                    php_env_modules_enabled=$(get_php_env_modules_enabled | sed "/^json/d")
                    for module in ${php_env_modules_enabled} ; do
                        if [ -f "${modules_available}"/"${module}".ini ]; then
                            echo "Enabling '$(basename "${module}" .ini)' module"
                            case "$(container_info distro)" in
                                "alpine" )
                                    ln -sf "${modules_available}/${module}.ini" ${php_prefix}/conf.d/$(cat ${modules_available}/${module}.ini | grep ";priority" | cut -d = -f 2)-${module}.ini
                                    if [ "${php_major_version}" != "8" ] ; then
                                        if [ -f "${modules_available}/json.ini" ]; then
                                            ln -sf "${modules_available}/json.ini" ${php_prefix}/conf.d/$(cat ${modules_available}/json.ini | grep ";priority" | cut -d = -f 2)-json.ini
                                        fi
                                    fi
                                ;;
                                "debian" )
                                    silent phpenmod $(basename $module .ini)
                                    if [ "${php_major_version}" != "8" ] ; then silent phpenmod json ; fi
                                    if [[ "$( ls -l ${php_prefix}/fpm/conf.d/*-opcache.ini |  wc -l )" -gt 1 ]] ; then
                                       rm -f "$(ls ${php_prefix}/fpm/conf.d/*-opcache.ini | tail -1 )"
                                    fi
                                    if [[ "$( ls -l ${php_prefix}/cli/conf.d/*-opcache.ini |  wc -l )" -gt 1 ]] ; then
                                       rm -f "$(ls ${php_prefix}/cli/conf.d/*-opcache.ini | tail -1 )"
                                    fi
                                ;;
                            esac
                            php_script_modules_enabled="${php_actual_modules_enabled} $(basename $module .ini)"
                        else
                            echo "** Requested enabling '$(basename $module .ini)' module however it doesn't exist!"
                        fi
                    done
                ;;
                "optional" )
                    php_env_modules_enabled=$(get_php_env_modules_enabled)
                    echo "** Activating Optional Modules"
                    for module in "${modules_available}"/*.ini; do
                        if ! grep -w -i -q "$(basename ${module} .ini)" "${php_env_modules_enabled}"; then
                            echo "Enabling $(basename ${module} .ini)"
                            case "$(container_info distro)" in
                                "alpine" )
                                    ln -sf "${module}" ${php_prefix}conf.d/$(cat ${module} | grep ";priority" | cut -d = -f 2)-$(basename ${module})
                                ;;
                                "debian" )
                                    silent phpenmod $(basename ${module} .ini)
                                ;;
                            esac
                            php_script_modules_enabled="${php_actual_modules_enabled} $(basename ${module} .ini)"
                        fi
                    done

                php_env_modules_enabled=$(get_php_env_modules_enabled)
                    echo "** Activating Optional Modules"
                    for module in "${modules_available}"/*.ini; do
                        MATCH=0
                        for plugin in $php_env_modules_enabled ; do
                            if [ "$(basename ${module} .ini)" = "${plugin}" ] ; then
                                (( MATCH+=1 ))
                            fi
                        done

                        if [[ "$MATCH" -lt 1 ]] ; then
                            echo "Enabling $(basename ${module} .ini)"
                            case "$(container_info distro)" in
                                "alpine" )
                                    ln -sf "${module}" ${php_prefix}conf.d/$(cat ${module} | grep ";priority" | cut -d = -f 2)-$(basename ${module})
                                ;;
                                "debian" )
                                    silent phpdismod $(basename ${module} .ini)
                                ;;
                            esac
                        fi
                    done
                ;;
                * )
                    if [ -f "${modules_available}/$1.ini" ]; then
                        echo "Enabling $1"
                        case "$(container_info distro)" in
                                "alpine" )
                                    ln -sf "${modules_available}/$1.ini" ${php_prefix}conf.d/$(cat ${modules_available}/${1}.ini | grep ";priority" | cut -d = -f 2)-$1.ini
                                ;;
                                "debian" )
                                    silent phpenmod "$1"
                                ;;
                        esac

                    else
                        echo "** Requested enabling '${1}' module however it doesn't exist!"
                    fi
                ;;
        esac
    else
       echo "** Enable Module"
       echo "Commands: all | core | optional | (modulename)"
    fi
}

info() {
    if [ -n "${1}" ]; then
        case "${1,,}" in
            "base" )
                echo "${php_base}"
            ;;
            "base_alt" )
                echo "${php_base/./}"
            ;;
            "help" )
                echo "Commands: base | modules_path | prefix | version"
            ;;
            "modules_path" )
                echo "${modules_available}"
            ;;
            "prefix" )
                echo "${php_prefix}"
            ;;
            "version" )
                echo "${php_version}"
            ;;
        esac
    else
        echo "** Info"
        echo "Commands: base | modules_path | prefix | version"
    fi
}

list_module() {
    if [ -n "${1}" ]; then
        case "${1,,}" in
            "all" )
                echo "** Listing All Modules"
                for module in ${modules_available}/*.ini; do
                    echo "$(basename $module .ini)"
                done
            ;;
            "core"  )
                echo "** Listing Core Modules"
                php_env_modules_enabled=$(get_php_env_modules_enabled)
                for module in $php_env_modules_enabled ; do
                    if [ -f "${modules_available}/${module}.ini" ]; then
                        echo "${module}"
                    else
                        echo "** ERROR: '${module}' module enabled but doesn't exist"
                    fi
                done
            ;;
            "optional" )
                echo "** Listing Optional Modules"
                php_env_modules_enabled=$(get_php_env_modules_enabled)

                for module in ${modules_available}/*.ini; do
                    MATCH=0
                    for plugin in $php_env_modules_enabled ; do
                        if [ "$(basename ${module} .ini)" = "${plugin}" ] ; then
                            (( MATCH+=1 ))
                        fi
                    done

                    if [[ "$MATCH" -lt 1 ]] ; then
                        echo "$(basename $module .ini)"
                    fi
                done
            ;;
        esac
    else
       echo "** List Modules"
       echo "Commands: all | core | optional"
    fi
}

display_help() {
    cat <<EOF

    PHP Module Tool - Use this to
    Syntax: $(basename $0) <command> <argument>

    Command: enable | disable | list | help
       enable - Enable a module for usage
       disable - Disable a mdule for usage
       info - Get information about the PHP install
       list - List available modules
       help - This is it

    Argument: all | core | optional | <module_name>
       all - Every Module
       core - Modules set via environment variable PHP_MODULE_ENABLE_*=TRUE
       optional - All other modules not explicitly set with PHP_MODULE_ENABLE_*=TRUE
       module_name - The PHP Extension name ie 'zip'
EOF
}

prepare() {
    case "$(container_info distro)" in
        "alpine" )
            mkdir -p ${modules_available}
            for module in ${php_prefix}/conf.d/*.ini; do
                if [ ! -L "${module}" ] ; then
                    ## Assign Priority 20 to filenames without prefix
                    if ! [[ "$(basename $module .ini)" =~  ^[0-9][0-9] ]] ; then
                        mv "${module}" "$(dirname ${module})/20_$(basename ${module})"
                        module="$(dirname ${module})/20_$(basename ${module})"
                    fi
                    ## Add Priority Comment into file for later use
                    if ! grep -w -i -q ";priority" "$module"; then
                        echo ";priority=$(basename $module .ini | cut -d _ -f1)" >> $module
                        mv "${module}" "${modules_available}"/$(basename ${module} .ini | cut -c 4-).ini
                    fi
                fi
            done
        ;;
    esac
}

get_php_env_modules_enabled() {
    set -o posix; set | sort | grep "^PHP_MODULE_ENABLE_.*=" | grep -i TRUE | cut -d _ -f 4- | cut -d = -f 1 | tr A-Z a-z
}

if [ "${PHP_MODULE_ENABLE_OPENSSL,,}" = "true" ] && [ ! -f "${modules_available}"/openssl.ini ]; then
    export PHP_MODULE_ENABLE_OPENSSL=FALSE
fi

if [ -n "$1" ] ; then
    case "${1,,}" in
        "enable" )
            enable_module "$2"
            if [[ "$(pgrep -f 'php-fpm: master process')" -ge "1" ]] ; then
                pkill php-fpm
            fi
        ;;
        "disable" )
            disable_module "$2"
            if [[ "$(pgrep -f 'php-fpm: master process')" -ge "1" ]] ; then
                pkill php-fpm
            fi
        ;;
        "info" )
            info "$2"
        ;;
        "list" )
            list_module "$2"
        ;;
        "prepare" )
            prepare
        ;;
        "help" )
            display_help "$2"
        ;;
    esac
else
    echo "PHP Module Tool"
    echo "Commands: enable | disable | list | info | help"
fi
